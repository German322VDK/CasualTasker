using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;

namespace CasualTasker.DTO.Base
{
    /// <summary>
    /// Represents an abstract base class for entities that have a unique identifier and a name.
    /// </summary>
    public abstract class NamedEntity : ICloneable
    {
        /// <summary>
        /// Gets or sets the unique identifier for the entity.
        /// This value is automatically generated by the database upon insertion.
        /// </summary>
        [Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets the name of the entity.
        /// </summary>
        public string Name { get; set; } = string.Empty;

        /// <summary>
        /// Creates a new copy (clone) of the current entity instance.
        /// Implementations of this method should return a deep copy of the entity.
        /// </summary>
        /// <returns>A new object that is a copy of the current instance.</returns>
        public abstract object Clone();

        /// <summary>
        /// Updates the current entity's properties based on another instance of the same type.
        /// The <paramref name="entity"/> should be of type <see cref="NamedEntity"/>.
        /// </summary>
        /// <param name="entity">The source entity from which to copy values.</param>
        /// <exception cref="ArgumentNullException">Thrown if the provided <paramref name="entity"/> is null.</exception>
        public virtual void UpdateFrom(NamedEntity entity)
        {
            if (entity == null)
                throw new ArgumentNullException(nameof(entity));

            Id = entity.Id;
            Name = entity.Name;
        }
    }
}
